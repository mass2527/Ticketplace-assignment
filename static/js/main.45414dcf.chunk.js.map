{"version":3,"sources":["components/Header.tsx","components/Search.tsx","assets/default_img.png","components/Movie.tsx","env/env.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","appTitle","Search","searchMovie","useState","input","setInput","value","onChange","e","target","type","disabled","onClick","preventDefault","Movie","movieInfo","Title","Poster","Type","Year","className","src","DEFAULT_POSTER","alt","API_KEY","App","loading","setLoading","error","setError","movies","setMovies","searchTerm","a","fetch","res","json","Response","Error","invalidResponse","console","mesage","useEffect","length","map","movie","imdbID","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAceA,EARiB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjC,OACE,iCACE,6BAAKA,OCkBIC,G,MApBiB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACzBC,mBAAS,IADgB,mBAC5CC,EAD4C,KACrCC,EADqC,KAUnD,OACE,iCACE,uBAAOC,MAAOF,EAAOG,SAAU,SAACC,GAAD,OAAOH,EAASG,EAAEC,OAAOH,QAAQI,KAAK,SACrE,wBAAQC,UAAWP,EAAOQ,QAV9B,SAAqBJ,GACnBA,EAAEK,iBAEFX,EAAYE,GACZC,EAAS,KAMP,yBCpBS,MAA0B,wCC6B1BS,G,MApBgB,SAAC,GAAkD,IAAD,IAA/CC,UAAaC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,KAClE,OACE,oCACE,qBAAKC,UAAU,gBAAf,SACE,6BAAKJ,MAGP,qBAAKI,UAAU,iBAAf,SACE,qBAAKC,IAAgB,QAAXJ,EAAmBK,EAAiBL,EAAQM,IAAKP,MAG7D,qBAAII,UAAU,gBAAd,UACE,6BAAKF,IACL,mCACA,6BAAKC,YCtBEK,EADC,UC4EDC,MA3Df,WAAgB,IAAD,EACiBtB,oBAAS,GAD1B,mBACNuB,EADM,KACGC,EADH,OAEaxB,mBAAS,IAFtB,mBAENyB,EAFM,KAECC,EAFD,OAGe1B,mBAA2B,IAH1C,mBAGN2B,EAHM,KAGEC,EAHF,cASE7B,EATF,8EASb,WAA2B8B,GAA3B,yBAAAC,EAAA,6DACEN,GAAW,GACXE,EAAS,IACTE,EAAU,IAHZ,kBAMsBG,MAAM,8BAAD,OAA+BF,EAA/B,mBAAoDR,IAN/E,cAMUW,EANV,gBAWgFA,EAAIC,OAXpF,gBAQMC,EARN,EAQMA,SACApC,EATN,EASMA,OACAqC,EAVN,EAUMA,MAVN,KAaYD,EAbZ,OAcW,SAdX,QAkBW,UAlBX,gCAeQN,EAAU9B,GAflB,oCAmBQ4B,EAASS,GAnBjB,6BAuBcC,EAAyBF,EAC/BG,QAAQZ,MAAR,2BAAkCW,IAxB1C,gEA2BU,IAAID,MAAM,KAAMG,QA3B1B,yBA6BId,GAAW,GA7Bf,8EATa,sBA0Cb,OArCAe,qBAAU,WACRxC,EAAY,cACX,IAoCD,sBAAKkB,UAAU,MAAf,UACE,cAAC,EAAD,CAAQpB,SAAS,gBAEjB,iCACE,cAAC,EAAD,CAAQE,YAAaA,IAEpBwB,GAAW,gDACXE,GAAS,iCAASA,IAEA,IAAlBE,EAAOa,QACNb,EAAOc,KAAI,SAACC,GAAD,OAAW,cAAC,EAAD,CAA0B9B,UAAW8B,GAAzBA,EAAMC,kBCxDnCC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.45414dcf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface Props {\r\n  appTitle: string;\r\n}\r\n\r\nconst Header: React.FC<Props> = ({ appTitle }) => {\r\n  return (\r\n    <header>\r\n      <h1>{appTitle}</h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { MouseEvent, useState } from 'react';\r\nimport '../styles/Search.css';\r\n\r\ninterface Props {\r\n  searchMovie(searchTerm: string): void;\r\n}\r\n\r\nconst Search: React.FC<Props> = ({ searchMovie }) => {\r\n  const [input, setInput] = useState('');\r\n\r\n  function handleClick(e: MouseEvent) {\r\n    e.preventDefault();\r\n\r\n    searchMovie(input);\r\n    setInput('');\r\n  }\r\n\r\n  return (\r\n    <form>\r\n      <input value={input} onChange={(e) => setInput(e.target.value)} type=\"text\" />\r\n      <button disabled={!input} onClick={handleClick}>\r\n        Search\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","export default __webpack_public_path__ + \"static/media/default_img.7c957867.png\";","import React from 'react';\r\nimport { MovieType } from '../App';\r\nimport DEFAULT_POSTER from '../assets/default_img.png';\r\nimport '../styles/Movie.css';\r\n\r\ninterface Props {\r\n  movieInfo: MovieType;\r\n}\r\n\r\nconst Movie: React.FC<Props> = ({ movieInfo: { Title, Poster, Type, Year } }) => {\r\n  return (\r\n    <section>\r\n      <div className=\"title-wrapper\">\r\n        <h3>{Title}</h3>\r\n      </div>\r\n\r\n      <div className=\"poster-wrapper\">\r\n        <img src={Poster === 'N/A' ? DEFAULT_POSTER : Poster} alt={Title} />\r\n      </div>\r\n\r\n      <ul className=\"poster-detail\">\r\n        <li>{Type}</li>\r\n        <li>|</li>\r\n        <li>{Year}</li>\r\n      </ul>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Movie;\r\n","const API_KEY = 'ac5e5e4';\r\nexport default API_KEY;\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport Movie from './components/Movie';\nimport API_KEY from './env/env';\n\ntype ResponseType = 'True' | 'False';\n\nexport type MovieType = {\n  Title: string;\n  Year: string;\n  imdbID: string;\n  Type: string;\n  Poster: string;\n};\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [movies, setMovies] = useState<Array<MovieType>>([]);\n\n  useEffect(() => {\n    searchMovie('parasite');\n  }, []);\n\n  async function searchMovie(searchTerm: string) {\n    setLoading(true);\n    setError('');\n    setMovies([]);\n\n    try {\n      const res = await fetch(`https://www.omdbapi.com/?s=${searchTerm}&apikey=${API_KEY}`);\n      const {\n        Response,\n        Search,\n        Error,\n      }: { Response: ResponseType; Search?: MovieType[]; Error?: string } = await res.json();\n\n      switch (Response) {\n        case 'True':\n          setMovies(Search!);\n          break;\n\n        case 'False':\n          setError(Error!);\n          break;\n\n        default:\n          const invalidResponse: never = Response;\n          console.error(`Invalid response ${invalidResponse}`);\n      }\n    } catch (error) {\n      throw new Error(error.mesage);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Header appTitle=\"Ticketplace\" />\n\n      <main>\n        <Search searchMovie={searchMovie} />\n\n        {loading && <strong>loading...</strong>}\n        {error && <strong>{error}</strong>}\n\n        {movies.length !== 0 &&\n          movies.map((movie) => <Movie key={movie.imdbID} movieInfo={movie} />)}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}